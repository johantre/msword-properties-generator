name: Send Email on Update

on:
  push:
    paths:
      - '**/OffersCustomer.xlsx'  # Trigger workflow on specific file update
  workflow_dispatch:
    inputs:
      klantNaam:
        description: 'Klant Naam'
        required: false
      klantJobTitle:
        description: 'Klant JobTitle'
        required: false
      klantJobReference:
        description: 'Klant JobReference'
        required: false
      sendEmail:
        description: 'Send in Email'
        required: true
        default: false
        type: boolean
      emailRecipient:
        description: 'Email recipient'
        required: false
      uploadDropbox:
        description: 'Upload to Dropbox Johan'
        required: true
        default: false
        type: boolean

jobs:
  send_email_job:
    if: github.event.inputs.sendEmail == 'true' || github.event.inputs.uploadDropbox == 'true'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Trim spaces from email input
        id: trim_email
        run: |
          email="${{ github.event.inputs.emailRecipient }}"
          trimmed_email=$(echo "$email" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
          echo "name=email::$trimmed_email" >> $GITHUB_OUTPUT

      - name: Fail if email is not provided when sendEmail is true
        if: ${{ github.event.inputs.sendEmail == 'true' && steps.trim_email.outputs.email == '' }}
        run: |
          echo "❌ Error: Email is required when 'Send in Email' is checked. Aborting pipeline."
          exit 1

      - name: Setup Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Ensure Cache Directory Exists
        run: |
          sudo mkdir -p ~/.cache/pip
          sudo mkdir -p /usr/lib/jvm
          sudo mkdir -p /usr/lib/libreoffice

      - name: Set Permissions and Ownership
        run: |
          sudo chown -R $USER:$USER ~/.cache/pip
          sudo chown -R $USER:$USER /usr/lib/jvm
          sudo chown -R $USER:$USER /usr/lib/libreoffice
          sudo chmod -R 777 ~/.cache/pip
          sudo chmod -R 777 /usr/lib/jvm
          sudo chmod -R 777 /usr/lib/libreoffice

      - name: List Python, JDK, LibreOffice Cache Contents before Cache installation
        run: |
          ls -alh ~/.cache/pip || echo "Python cache directory does not exist"
          echo "Listing JDK cache contents"
          ls -alh /usr/lib/jvm || echo "JDK cache directory does not exist"          
          echo "Listing LibreOffice cache contents"
          ls -alh /usr/lib/libreoffice || echo "LibreOffice cache directory does not exist"
          echo "Listing Python cache contents"

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
        continue-on-error: true

      - name: Cache JDK 11 installation
        uses: actions/cache@v3
        with:
          path: /usr/lib/jvm
          key: ${{ runner.os }}-jdk11
          restore-keys: |
            ${{ runner.os }}-jdk11-
        continue-on-error: true

      - name: Cache LibreOffice installation
        uses: actions/cache@v3
        with:
          path: /usr/lib/libreoffice
          key: ${{ runner.os }}-libreoffice
          restore-keys: |
            ${{ runner.os }}-libreoffice-
        continue-on-error: true

      - name: List Python, JDK, LibreOffice Cache Contents after Cache installation
        run: |
          ls -alh ~/.cache/pip || echo "Python cache directory does not exist"
          echo "Listing JDK cache contents"
          ls -alh /usr/lib/jvm || echo "JDK cache directory does not exist"          
          echo "Listing LibreOffice cache contents"
          ls -alh /usr/lib/libreoffice || echo "LibreOffice cache directory does not exist"
          echo "Listing Python cache contents"

      - name: Cache keys Python, JDK, LibreOffice used
        run: |
          echo "Cache key Python used: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}"
          ls -la ~/.cache/pip
          echo "Cache key JDK used: ${{ runner.os }}-jdk11"
          ls -la /usr/lib/jvm
          echo "Cache key LibreOffice used: ${{ runner.os }}-libreoffice"
          ls -la /usr/lib/libreoffice

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'

      - name: Print Java installation directory
        run: |
          echo "Java installation directory: $JAVA_HOME"

      - name: Verify Java installation
        run: |
          java -version

      - name: Verify Cache Ownership
        run: |
          echo "Checking ownership of cache directories"
          ls -ld /usr/lib/libreoffice
          ls -ld ~/.cache/pip

      # 🔥 NEW STEP: Explicitly install LibreOffice clearly
      - name: Install LibreOffice Dependency (soffice)
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y libreoffice
          # verify soffice installed & its version for debugging:
          soffice --version

      # ✅ Confirm clearly that `soffice` is now available on the PATH
      - name: Verify `soffice` Installation
        run: |
          which soffice
          soffice --version

      - name: Check LibreOffice Java configuration
        run: |
          export JAVA_HOME=$JAVA_HOME
          libreoffice --version

      - name: Enable Debugging
        run: |
          echo "ACTIONS_RUNNER_DEBUG=true" >> $GITHUB_ENV
          echo "ACTIONS_STEP_DEBUG=true" >> $GITHUB_ENV

      - name: Run Python script to send email and upload to Dropbox
        env:
          LOG_LEVEL: INFO
          APP_PASS_MAIL: ${{ secrets.APP_PASS_MAIL }}
          DROPBOX_APP_KEY:  ${{ secrets.DROPBOX_APP_KEY }}
          DROPBOX_APP_SECRET:  ${{ secrets.DROPBOX_APP_SECRET }}
          DROPBOX_REFRESH_TOKEN: ${{ secrets.DROPBOX_REFRESH_TOKEN }}
        run: |
          if [ -n "${{ github.event.inputs.emailRecipient }}" ] && [ -n "${{ github.event.inputs.klantNaam }}" ] && [ -n "${{ github.event.inputs.klantJobTitle }}" ] && [ -n "${{ github.event.inputs.klantJobReference }}" ]; then
            CMD="python3 GenerateOfferDocuments.py --verbose --klantNaam '${{ github.event.inputs.klantNaam }}' --klantJobTitle '${{ github.event.inputs.klantJobTitle }}' --klantJobReference '${{ github.event.inputs.klantJobReference }}' --emailRecipient '${{ github.event.inputs.emailRecipient }}' --uploadDropbox '${{ github.event.inputs.uploadDropbox }}'"
          else
            CMD="python3 GenerateOfferDocuments.py --verbose"
          fi
          echo "Executing command: $CMD"
          eval $CMD

