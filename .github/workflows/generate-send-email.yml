name: Generate, Send & add to Dropbox

on:
  push:
    paths:
      - '**/OffersCustomer.xlsx'  # Trigger workflow on specific file update
  workflow_dispatch:
    inputs:
      klantNaam:
        description: 'Klant Naam'
        required: true
      klantJobTitle:
        description: 'Klant JobTitle'
        required: true
      klantJobReference:
        description: 'Klant JobReference'
        required: true
      sendEmail:
        description: 'Send in Email'
        required: true
        default: false
        type: boolean
      leverancierEmail:
        description: 'Leverancier Email'
        required: false
      uploadDropbox:
        description: 'Upload to Dropbox Johan'
        required: false
        default: false
        type: boolean
      setLogLevelDebug:
        description: 'Enable DEBUG (Admin only)'
        required: false
        type: boolean


jobs:
  send_email_upload_dropbox_job:
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.sendEmail == 'true' || github.event.inputs.uploadDropbox == 'true'
    runs-on: ubuntu-latest

    container:
      image: ghcr.io/johantre/github-runner-env:latest

    steps:
      - uses: actions/checkout@v3

      - name: Cache Docker installation
        uses: actions/cache@v3
        with:
          path: /var/lib/apt/lists
          key: ${{ runner.os }}-docker-apt-${{ hashFiles('**/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-docker-apt-

      - name: Cache Docker image
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ hashFiles('**/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Set up Docker
        run: |
          apt-get update
          apt-get install -y docker.io

      - name: Log in to GitHub Container Registry
        run: echo ${{ secrets.GHCR_PAT }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Pull the Docker image from GHCR
        run: docker pull ghcr.io/johantre/github-runner-env:latest

      - name: Set custom log level
        run: |
          if [[ "${{ github.actor }}" == "johantre" ]] && [[ "${{ github.event.inputs.setLogLevelDebug }}" == "true" ]]; then
            echo "LOG_LEVEL=DEBUG" >> $GITHUB_ENV
          else
            echo "LOG_LEVEL=INFO" >> $GITHUB_ENV
          fi

      - name: Check LOG_LEVEL in next step
        run: |
          echo "env.LOG_LEVEL in next step: ${{ env.LOG_LEVEL }}"

      - name: Mask email input explicitly safe and recommended
        if: github.event.inputs.leverancierEmail != ''
        run: |
          echo "::add-mask::${{ github.event.inputs.leverancierEmail }}"

      - name: Trim spaces from email input
        id: trim_email
        run: |
          email="${{ github.event.inputs.leverancierEmail }}"
          trimmed_email=$(echo "$email" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
          echo "trimmed_email=$trimmed_email" >> $GITHUB_OUTPUT

      - name: Fail if email is not provided when sendEmail is true
        if: ${{ github.event.inputs.sendEmail == 'true' && steps.trim_email.outputs.trimmed_email == '' }}
        run: |
          echo "trimmed mail should not be empty, right? *${{steps.trim_email.outputs.trimmed_email}}*"
          echo "‚ùå Error: Email is required when 'Send in Email' is checked. Aborting pipeline."
          exit 1

      - name: Run Python script to generated, send email and upload to Dropbox
        env:
          LOG_LEVEL: ${{ env.LOG_LEVEL }}
          HASHING_KEY: ${{ secrets.HASHING_KEY }}
          ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
          APP_PASS_MAIL: ${{ secrets.APP_PASS_MAIL }}
          DROPBOX_APP_KEY:  ${{ secrets.DROPBOX_APP_KEY }}
          DROPBOX_APP_SECRET:  ${{ secrets.DROPBOX_APP_SECRET }}
          DROPBOX_REFRESH_TOKEN: ${{ secrets.DROPBOX_REFRESH_TOKEN }}
        run: |
          export PYTHONPATH=$PYTHONPATH:$(pwd)/src
          echo "::notice::Display args: ${{ github.event.inputs.klantNaam }}, ${{ github.event.inputs.klantJobTitle }}, ${{ github.event.inputs.klantJobReference }}, ${{ github.event.inputs.leverancierEmail }}, ${{ github.event.inputs.uploadDropbox }}"
          if [ -n "${{ github.event.inputs.klantNaam }}" ] && [ -n "${{ github.event.inputs.klantJobTitle }}" ] && [ -n "${{ github.event.inputs.klantJobReference }}" ]; then
            echo "::debug::Optional args detected, manually call with args."
            CMD="python3 src/msword_properties_generator/main/generate_offer_documents.py --verbose --klantNaam '${{ github.event.inputs.klantNaam }}' --klantJobTitle '${{ github.event.inputs.klantJobTitle }}' --klantJobReference '${{ github.event.inputs.klantJobReference }}' --leverancierEmail '${{ github.event.inputs.leverancierEmail }}' --uploadDropbox '${{ github.event.inputs.uploadDropbox }}'"
          else
            echo "No optional args detected, standard flow followed."
            CMD="python3 src/msword_properties_generator/main/generate_offer_documents.py --verbose"
          fi
          echo "::debug::Executing command: $CMD"
          eval $CMD
